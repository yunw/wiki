参见[http://www.linuxsir.org/main/?q=node/137 linuxsir上的一篇文章]

== 格式 ==
find pathname -options [-print -exec -ok ...]

== 参数 ==
* pathname 	查找路径
* -print 	将匹配文件名输出到标准输出
* -exec 	对匹配文件执行该参数所给出的shell; 'command' {} \;
* -ok 		和-exec相同, 但以更安全的模式来执行命令, 每个命令前让用户确认
* options 	下面重点介绍

== options ==
  * -name 	按文件名查找
  * -perm 	按文件权限查找
  * -prune 	不在当前指定的目录中查找; 若同时使用-depth, 则-prune被忽略
  * -user 	按文件属主查找
  * -group 	按文件所属的组来查找
  * -mtime -n +n 	按文件更改时间查找. -n(n天以内), +n(n天以前)
  * -nogroup 	查找无有效所属组的文件, 即其所属组在/etc/groups中不存在
  * -nouser 	查找无有效属主的文件, 即其属主在/etc/passwd文件中不存在
  * -newer file1 !file2 	查找更改时间比file1新但比file2旧的文件
  * -type 	查找某一类型的文件
    		* b - 块设备
		* d - 目录
		* c - 字符设备
		* p - 管道文件
		* l - 符号链接
		* f - 普通文件
  * -size n [c] 查找文件长度为n块的文件, 带c表示长度以字节计
  * -depth 	查找文件时, 首先找到当前目录中的文件,然后再在其子目录中查找
  * -fstype 	查找位于某一类型文件系统中的文件
  * -mount 	查找文件时不跨越系统mount点
  * -follow 	若遇到符号链接, 则跟踪至其所指向的文件
  * -cpio 	对匹配文件使用cpio命令, 备份到磁带设备中
<!-- access/chmode/modify -->
  * -amin n     查找系统中最后N分钟访问的文件
  * -atime n    查找系统中最后n*24小时访问的文件
  * -cmin n     查找系统中最后N分钟被改变文件状态的文件
  * -ctime n    查找系统中最后n*24小时被改变文件状态的文件
  * -mmin n     查找系统中最后N分钟被改变文件数据的文件
  * -mtime n    查找系统中最后n*24小时被改变文件数据的文件

== 实例 ==
find . -type f -exec chmod 644 {} \;
find . -name '*~' -ok rm {} \;

== xargs ==
xargs - build and execute command lines from standard input

在使用find命令的-exec选项处理匹配到的文件时，find命令将所有匹配到的文件一起
传递给exec执行。 但有些系统对能够传递给exec的命令长度有限制，
这样在find命令运行几分钟之后，就会出现溢出错误。
错误信息通常是“参数列太长”或“参数列溢出”。
这就是xargs命令的用处所在，特别是与find命令一起使用。

find命令把匹配到的文件传递给xargs命令，而xargs命令每次只获取一部分文件而不是
全部，不像-exec选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，
并如此继续下去。

在有些系统中，使用-exec选项会为处理每一个匹配到的文件而发起一个相应的进程，
并非将匹配到的文件全部作为参数一次执行；这样在有些情况下就会出现进程过多，
系统性能下降的问题，因而效率不高；

而使用xargs命令则只有一个进程。
另外，在使用xargs命令时，究竟是一次获取所有的参数，还是分批取得参数，
以及每一次获取参数的数目都会根据该命令的选项及系统内核中相应的可调参数来确定。


*当文件名中带有空格时, 需要用双引号包住才能执行.可以这样解决*
`find . -type f -print0 | xargs -0 [commond]`


